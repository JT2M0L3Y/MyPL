# ------------------------------------------------
# FILE: prog2.mypl
# DATE: 4/17/2023
# AUTH: Jonathan Smoley
# DESC: MyPl program to utilize Caesar Cipher
# ------------------------------------------------

array char init_alphabet() {
  # initialize an array of the alphabet
  array char alpha = new char[26]
  alpha[0] = 'a'
  alpha[1] = 'b'
  alpha[2] = 'c'
  alpha[3] = 'd'
  alpha[4] = 'e'
  alpha[5] = 'f'
  alpha[6] = 'g'
  alpha[7] = 'h'
  alpha[8] = 'i'
  alpha[9] = 'j'
  alpha[10] = 'k'
  alpha[11] = 'l'
  alpha[12] = 'm'
  alpha[13] = 'n'
  alpha[14] = 'o'
  alpha[15] = 'p'
  alpha[16] = 'q'
  alpha[17] = 'r'
  alpha[18] = 's'
  alpha[19] = 't'
  alpha[20] = 'u'
  alpha[21] = 'v'
  alpha[22] = 'w'
  alpha[23] = 'x'
  alpha[24] = 'y'
  alpha[25] = 'z'
  return alpha
}

void print_arr(array int text, array char bank) {
  for (int i = 0; i < length(text); i = i + 1) {
    for (int j = 0; j < length(bank); j = j + 1) {
      if (text[i] == j) {
        print(concat(to_string(bank[j]), " "))
      }
    }
    # print(concat(to_string(text[i]), " "))
  }
  print("\n")
}

array int str_to_ascii(string text, array char bank) {
  # convert string to numeric alphabet locations
  array int arr = new int[length(text)]
  for (int i = 0; i < length(text); i = i + 1) {
    # store index in alphabet
    for (int j = 0; j < length(bank); j = j + 1) {
      if (get(i, text) == bank[j]) {
        arr[i] = j
      }
    }
  }
  return arr
}

array int encrypt(array int text, int shift) {
  # encrypt int-converted string by shift
  for (int i = 0; i < length(text); i = i + 1) {
    text[i] = text[i] + shift
    if (text[i] >= 26) {
      text[i] = (text[i] + shift - 26)
    }
  }
  return text
}

array int decrypt(array int text, int shift) {
  # decrypt shifted ciphertext to int plaintext
  for (int i = 0; i < length(text); i = i + 1) {
    text[i] = text[i] - shift
    if (text[i] < 0) {
      text[i] = (text[i] - shift + 26)
    }
  }
  return text
}

string ascii_to_str(array int text, array char bank) {
  # convert "ascii" to string
  string res = ""
  for (int i = 0; i < length(text); i = i + 1) {
    # get char at index in array
    for (int j = 0; j < length(bank); j = j + 1) {
      if (text[i] == j) {
        res = concat(res, to_string(bank[j]))
      }
    }
  }
  return res
}

void main() {
  array char alpha = init_alphabet()

  print("Enter a lowercase, alphabetic string: ")
  string pt = input()
  print("Enter an integer to shift by: ")
  int shift = to_int(input())
  
  print("Original text: \n")
  array int arr = str_to_ascii(pt, alpha)
  print_arr(arr, alpha)

  print("Encrypted text: \n")
  arr = encrypt(arr, shift)
  print_arr(arr, alpha)

  print("Decrypted text: \n")
  arr = decrypt(arr, shift)
  print_arr(arr, alpha)

  # ascii array converted to string
  string plaintext = ascii_to_str(arr, alpha)
}